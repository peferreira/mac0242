package parser;

import java.util.Vector;

import mv.empilhaveis.Endereco;

// Simbolo: pode ser nome de variavel ou funcao
class Simbolo {
        Endereco pos; // posição na memória: endereço

        Simbolo(int n) {
                pos = new Endereco(n);
        }

        void SetPos(int n) {
                pos = new Endereco(n);
        }
}

// Função
class Função extends Simbolo {
        Vector<String> args = new Vector<String>(); // lista dos argumentos
        TabSim Vars = new TabSim(); // nomes dos argumentos

        Função(int n) {
                super(n);
        }

        // inclui um argumento
        void addarg(String a) {
                Variavel v = new Variavel();
                args.add(a);
                Vars.add(a, v);
        }

        // pega o nome do argumento na posição n
        String getarg(int n) {
                return args.get(n);
        }

        // retorna a Variavel de nome a
        Variavel get(String a) {
                return (Variavel) Vars.get(a);
        }

        // verifica a existência
        Boolean exists(String a) {
                return Vars.exists(a);
        }
}

// Variavel
class Variavel extends Simbolo {
        static int nvars = 0; // número de variáveis globais

        Variavel() {
                super(nvars++);
        }
}
